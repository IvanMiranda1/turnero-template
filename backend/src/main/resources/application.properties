# Nombre de la aplicaci�n Spring
spring.application.name=turnero

# --- Configuraci�n de la Base de Datos PostgreSQL ---

# La URL de conexi�n apunta al nombre del contenedor de Docker 'database-turnero'
# Se leen las variables de entorno de Docker Compose
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# Driver JDBC para PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuraci�n del pool de conexiones (HikariCP por defecto)
#Limita el n�mero total de conexiones (tanto las que est�n en uso como las que est�n esperando) a 10.
# Si tu aplicaci�n necesita hacer 11 consultas a la vez, la n�mero 11 tendr� que esperar a que una de las 10 primeras se libere.
spring.datasource.hikari.maximum-pool-size=10
# Mantiene al menos 5 conexiones abiertas y listas para ser usadas en el pool.
spring.datasource.hikari.minimum-idle=5

# --- Configuraci�n de JPA y Hibernate ---
# Dialecto de la base de datos para optimizar consultas: PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Muestra el SQL en la consola
spring.jpa.show-sql=true

# Formatea el SQL para que sea legible en la consola
spring.jpa.properties.hibernate.format_sql=true

# Configura c�mo Hibernate maneja el esquema de la base de datos
# 'update': actualiza el esquema existente sin borrar datos.
# 'create-drop': crea el esquema al inicio y lo borra al final (�til para desarrollo).
# 'validate': valida que el esquema coincida con las entidades.
# 'none': no hace nada con el esquema.
spring.jpa.hibernate.ddl-auto=update

# --- Configuraci�n del Servidor ---
# Puerto del servidor
server.port=8080